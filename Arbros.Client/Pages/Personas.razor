@page "/personas"
@using Arbros.Shared.Models
@inject HttpClient Http


@*     INICIO DE FORMULARIO       *@

<div style="padding-bottom:20px;">
    <EditForm Model="NuevaPersona">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <InputText @bind-Value="NuevaPersona.Name" placeholder="Nombre" @oninput="(Microsoft.AspNetCore.Components.ChangeEventArgs e) => Mayuscula(e)"></InputText>

        <select class="form-select" style="margin-top:20px; margin-bottom:20px;" @bind="NuevaPersona.PaisId">
            <option value="">Seleccionar país</option>
            @foreach (var pais in ListaPaises)
            {
                <option value="@pais.Id">@pais.Pais</option>
            }
        </select>
        <SfButton type="submit" CssClass="e-primary" @onclick="async () => await CrearPersona(NuevaPersona)">Guardar</SfButton>
    </EditForm>
</div>
@*     FIN DE FORMULARIO       *@



@*     INICIO DE TABLA           *@
<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <SfGrid DataSource="@PagedData" TValue="Persona" AllowFiltering="true">
            <GridColumns>
                <GridColumn Field="@nameof(Persona.Name)" HeaderText="Nombre" Width="150" AllowFiltering="true"></GridColumn>

                <GridColumn Field="@nameof(Persona.Pais.Pais)" HeaderText="País" Width="150" AllowFiltering="true">
                    <Template>
                        @if (context is Persona persona && persona.Pais != null)
                        {
                            @persona.Pais.Pais
                        }
                        else
                        {
                            <span>No especificado</span>
                        }
                    </Template>
                </GridColumn>

                <GridColumn HeaderText="Acciones" Width="120">
                    <Template>
                        @if (context is Persona persona)
                        {
                            <SfButton CssClass="e-danger" type="button" @onclick="() => AbreEliminar(persona.Id)">Eliminar</SfButton>
                            <SfButton CssClass="e-primary" type="button" @onclick="() => AbreDialogo(persona)">Actualizar</SfButton>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>


  <!-- Paginador -->
        <SfPager @ref="@Page" PageSize="5" TotalItemsCount="@totalItems" NumericItemsCount="2" ItemClick="HandleNumericClick"></SfPager>
    </div>
</div>


@*     FINAL DE TABLA           *@

@if (abrirEliminarDialogo)
{
    <SfDialog @bind-Visible="abrirEliminarDialogo" Width="300px" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
                Confirmación de eliminación
            </Header>
            <Content>
                ¿Está seguro de que desea eliminarlo?
            </Content>
            <FooterTemplate>
                <SfButton CssClass="e-danger" @onclick="async () => await EliminarPersona(idPersonaAEliminar)">Aceptar</SfButton>
                <SfButton @onclick="CerrarDialogoEliminar">Cancelar</SfButton>
            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
}
@if (abrir)
{
    <SfDialog @bind-Visible="abrir" Width="300px" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
                Actualizar Persona
            </Header>
            <Content>
                @if (ListaPaises != null && ListaPaises.Any())
                {
                    <select @bind="personaActualizada.PaisId" class="form-select">
                        <option value="">Seleccionar país</option>
                        @foreach (var pais in ListaPaises)
                        {
                            <option value="@pais.Id">@pais.Pais</option>
                        }
                    </select>


                }
                else
                {
                    <span>Cargando países...</span>
                }

                <SfTextBox @bind-Value="personaActualizada.Name" placeholder="Nombre" @oninput="(Microsoft.AspNetCore.Components.ChangeEventArgs e) => Mayuscula(e)"></SfTextBox>
            </Content>
            <FooterTemplate>
                <SfButton CssClass="e-success" type="button" @onclick="async () => await ActualizarPersona()">Actualizar</SfButton>
                <SfButton type="button" @onclick="CerrarDialogo">Cerrar</SfButton>
            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
}

@code {
    public bool abrir = false;
    public bool abrirEliminarDialogo = false;
    public int idPersonaAEliminar;
    public Persona personaActualizada = new Persona { PaisId = 0 }; 
    public Persona personaAEliminar = new Persona();
    public Persona NuevaPersona = new Persona();
    public List<Persona> personas = new List<Persona>();
    public List<Persona> PagedData { get; set; } = new List<Persona>();
    public List<Paises> ListaPaises { get; set; } = new List<Paises>();
    public int totalItems; // Total de items
    public SfPager? Page;

    protected override async Task OnInitializedAsync()
    {
        // Carga inicial de datos
        personas = await Http.GetFromJsonAsync<List<Persona>>("api/Persona") ?? new List<Persona>();
        ListaPaises = await Http.GetFromJsonAsync<List<Paises>>("api/paises") ?? new List<Paises>();
        totalItems = personas.Count;
        PagedData = personas.Take(5)
        .ToList();
    }


    public async Task CrearPersona(Persona nuevaPersona)
    {
        var respuesta = await Http.PostAsJsonAsync("api/Persona", nuevaPersona);

        if (respuesta.IsSuccessStatusCode)
        {
            NuevaPersona = new Persona();  // Limpia el formulario
            personas = await Http.GetFromJsonAsync<List<Persona>>("api/Persona") ?? new List<Persona>();
            totalItems = personas.Count; // Actualiza el total de items
            UpdatePagedData(1); // Actualiza la lista paginada
        }
        else
        {
            var errorMessage = await respuesta.Content.ReadAsStringAsync();
            Console.WriteLine($"Error al crear persona: {errorMessage}");
        }
    }

    public async Task EliminarPersona(int id)
    {
        var respuesta = await Http.DeleteAsync($"api/Persona/{id}");

        if (respuesta.IsSuccessStatusCode)
        {
            personas = await Http.GetFromJsonAsync<List<Persona>>("api/Persona") ?? new List<Persona>();
            totalItems = personas.Count; // Actualiza el total de items
            UpdatePagedData(Page.CurrentPage); // Actualiza la lista paginada
            CerrarDialogoEliminar();
        }
        else
        {
            var errorMessage = await respuesta.Content.ReadAsStringAsync();
            Console.WriteLine($"Error al eliminar persona: {errorMessage}");
        }
    }

    public async Task ActualizarPersona()
    {
        try
        {
            // Realiza la solicitud PUT para actualizar la persona
            var respuesta = await Http.PutAsJsonAsync($"api/Persona/{personaActualizada.Id}", personaActualizada);

            if (respuesta.IsSuccessStatusCode)
            {
                // Si la actualización fue exitosa, recarga la lista de personas
                personas = await Http.GetFromJsonAsync<List<Persona>>("api/Persona") ?? new List<Persona>();
                totalItems = personas.Count; // Actualiza el total de items

                // Actualiza los datos paginados
                UpdatePagedData(Page.CurrentPage);

                // Cierra el diálogo de actualización
                CerrarDialogo();
            }
            else
            {
                var errorMessage = await respuesta.Content.ReadAsStringAsync();
                Console.WriteLine($"Error al actualizar persona: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inesperado: {ex.Message}");
        }
    }




    public void AbreEliminar(int id)
    {
        idPersonaAEliminar = id;  // Guarda el id de la persona a eliminar
        abrirEliminarDialogo = true;  // Abre el diálogo de confirmación
    }

    public void CerrarDialogoEliminar()
    {
        abrirEliminarDialogo = false;
    }

    public void AbreDialogo(Persona persona)
    {
        if (ListaPaises != null && ListaPaises.Any())
        {
            personaActualizada = new Persona
                {
                    Id = persona.Id,
                    Name = persona.Name,
                    PaisId = persona.PaisId // Asegúrate de incluir PaisId
                };
            abrir = true;
        }
        else
        {
            Console.WriteLine("Lista de países no está disponible.");
            abrir = false; // Cerrar el diálogo si no hay países
        }
    }


    public void CerrarDialogo()
    {
        abrir = false;
    }

    public void Mayuscula(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var valor = e.Value?.ToString();
        if (!string.IsNullOrEmpty(valor))
        {
            valor = char.ToUpper(valor[0]) + valor.Substring(1).ToLower();
            NuevaPersona.Name = valor; // Actualiza el campo de nombre en el modelo
        }
    }

    public void HandleNumericClick(PagerItemClickEventArgs args)
    {
        UpdatePagedData(args.CurrentPage);
    }

    private void UpdatePagedData(int currentPage)
    {
        int skip = (currentPage - 1) * 5; // Calcula el valor a omitir
        PagedData = personas
            .Skip(skip)
            .Take(5)
            .ToList(); // Actualiza la lista de datos paginados
    }
}
